   0x000000000040100c <+0>:     sub    $0x18,%rsp
   0x0000000000401010 <+4>:     lea    0xc(%rsp),a4
   0x0000000000401015 <+9>:     lea    0x8(%rsp),a3
   0x000000000040101a <+14>:    mov    $0x4025cf,a2
   0x000000000040101f <+19>:    mov    $0x0,%eax
   0x0000000000401024 <+24>:    call   0x400bf0 <__isoc99_sscanf@plt> %d %d
   0x0000000000401029 <+29>:    cmp    $0x2,%eax 
@REM    0x000000000040102c <+32>:    jne    0x401035 <phase_4+41>
   0x000000000040102e <+34>:    cmpl   $0xe,0x8(%rsp) a3 <= 14
   0x0000000000401033 <+39>:    jbe    0x40103a <phase_4+46>
@REM    0x0000000000401035 <+41>:    call   0x40143a <explode_bomb>
   0x000000000040103a <+46>:    mov    $0xe,%edx    b3 = 14
   0x000000000040103f <+51>:    mov    $0x0,%eb2    b2 = 0
   0x0000000000401044 <+56>:    mov    0x8(%rsp),%edi b1 = a3
   0x0000000000401048 <+60>:    call   0x400fce <func4>
   0x000000000040104d <+65>:    test   %eax,%eax return 0
@REM    0x000000000040104f <+67>:    jne    0x401058 <phase_4+76>
   0x0000000000401051 <+69>:    cmpl   $0x0,0xc(%rsp) a4 ==0
   0x0000000000401056 <+74>:    je     0x40105d <phase_4+81>
@REM    0x0000000000401058 <+76>:    call   0x40143a <explode_bomb>
   0x000000000040105d <+81>:    add    $0x18,%rsp
   0x0000000000401061 <+85>:    ret

    func4:
    0x0000000000400fce <+0>:     sub    $0x8,%rsp
    0x0000000000400fd2 <+4>:     mov    %edx,%eax eax = b3;
    0x0000000000400fd4 <+6>:     sub    %eb2,%eax eax -= b2;
    0x0000000000400fd6 <+8>:     mov    %eax,%ecx b4 = eax;
    0x0000000000400fd8 <+10>:    shr    $0x1f,%ecx  b4>>=31 //逻辑 b4是eax的符号位
    0x0000000000400fdb <+13>:    add    %ecx,%eax   eax += b4; eax = b3 - b2 +b4
    0x0000000000400fdd <+15>:    sar    %eax        eax >>= b4;//算数 
    0x0000000000400fdf <+17>:    lea    (%rax,%rb2,1),%ecx  b4 = rax + b2
    0x0000000000400fe2 <+20>:    cmp    %edi,%ecx 
    0x0000000000400fe4 <+22>:    jle    0x400ff2 <func4+36>

    0x0000000000400fe6 <+24>:    lea    -0x1(%rcx),%edx 
    0x0000000000400fe9 <+27>:    call   0x400fce <func4>
    0x0000000000400fee <+32>:    add    %eax,%eax
    0x0000000000400ff0 <+34>:    jmp    0x401007 <func4+57>

    0x0000000000400ff2 <+36>:    mov    $0x0,%eax
    0x0000000000400ff7 <+41>:    cmp    %edi,%ecx 
    0x0000000000400ff9 <+43>:    jge    0x401007 <func4+57>
    0x0000000000400ffb <+45>:    lea    0x1(%rcx),%eb2
    0x0000000000400ffe <+48>:    call   0x400fce <func4>
    0x0000000000401003 <+53>:    lea    0x1(%rax,%rax,1),%eax

    0x0000000000401007 <+57>:    add    $0x8,%rsp
    0x000000000040100b <+61>:    ret
        // a3<=14,0,14
    func4(b1,b2,b3){
        t = b3-b2; //ax->t  cx -> x
        if(b2>b3){
            t = [(b3-b2)/2];
            x = [(b3-b2)/2]+b2; 
        }else {
            x = b3;
        }
        if(x <= b1){
            t = 0;
            if(x >= b1)return 0; // t<=0
            return func4(b1,x+1,b3) * 2 +1;
        }else {
            return func4(b1,b2,x-1) * 2;
        }
    }