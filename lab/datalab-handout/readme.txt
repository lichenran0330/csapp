＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
CS:APP数据实验室
学生须知
＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊

您的目标是修改bit .c的副本，使其通过所有的
在不违反任何编码准则的情况下进行测试。


* * * * * * * * *
0. 文件:
* * * * * * * * *

makefile -生成最佳测试、显示和显示
README-这个文件
bits.c -你要修改并上交的文件
bits.h -头文件
btest.c -主要的btest程序
btest.h -用于构建btest
c -用于构建最佳测试
tests.c -用于构建最佳测试
tests-header.c-用于构建最佳测试
dlc* -规则检查编译器二进制(数据实验室编译器)
Driver .pl* -使用btest和dlc自动升级bits.c的驱动程序
Driverhdrs.pm -可选的“击败教授”比赛的头文件
fshow.c -用于检查浮点表示的实用程序
show.c -检查整数表示的实用程序

***********************************************************
1. 修改bits.c并检查它是否符合dlc
***********************************************************

重要提示:在使用之前，请仔细阅读bits.c文件中的说明
你开始。这些给出了你需要遵循的编码规则
你想要全学分。

使用dlc编译器(./dlc)自动检查
Bits.c以符合编码指引:

Unix > ./dlc bits.c

如果您的代码没有问题，DLC将静默返回。
否则，它将打印标记任何问题的消息。使用
-e开关:

Unix > ./dlc -e bits.c

使DLC打印每个函数使用的操作符数目的计数。

一旦有了合法的解决方案，就可以使用
./btest程序。

＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
2. 使用btest进行测试
＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊

这个目录中的Makefile用
创建名为btest的程序(或测试工具)的附加代码。

要编译并运行最佳程序，输入:

Unix > make btest
Unix > ./btest[可选的CMD行参数]

每次更改bits.c时，都需要重新编译btest
程序。当从一个平台移动到另一个平台时，您将希望
去掉旧版本的btest并生成一个新版本。使用
命令:

Unix > make clean
Unix > make btest

Btest通过运行数百万个测试来测试代码的正确性
每个函数的用例。它在一个众所周知的角落里测试了大片土地
对于整数谜题，例如Tmin和0，以及zero、inf和
浮点数的非规格化数和规格化数之间的边界
谜题。当btest检测到某个函数中的错误时，
它打印出失败的测试、不正确的结果和
预期结果，然后终止对该函数的测试。

以下是btest的命令行选项:

Unix > ./btest -h
用法:。/ bt (hg) [- r < n >] [- f <名称> [1 | 2 | 3 < val >] *] (- t > <期限)
-1 <val>指定第一个函数参数
-2 <val>指定第二个函数参数
-3 <val>指定第三个函数参数
-f <name>只测试指定的函数
-g格式化自动分级的输出，没有错误信息
-h打印此消息
-r <n>给出所有问题的统一权值n
-T <lim>将超时限制设置为lim

例子:

测试所有函数的正确性并打印出错误消息:
unix >。/ bt

以紧凑的形式测试所有函数，没有错误消息:
Unix > ./btest -g

测试函数foo的正确性:
Unix > ./btest -f

测试函数foo特定参数的正确性:
Unix > ./btest -f foo -1 27 -2 0xf

Btest不检查您的代码是否符合代码
指导方针。使用dlc来做到这一点。

＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
3. 辅助程序
＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊

我们已经包含了ishow和fshow程序来帮助你解读
分别表示整数和浮点数。每个都需要一个
单个十进制或十六进制数字作为参数。要构建它们，输入:

unix >使

示例用法:

Unix > ./ishow 0x27
Hex = 0x00000027, signed = 39, unsigned = 39

Unix > ./ishow
Hex = 0x0000001b, signed = 27, unsigned = 27

Unix > ./fshow 0x15213243
浮点值3.255334057e-26
0x15213243，符号= 0，指数= 0x2a，分数= 0x213243
归一化。+1.2593463659 x 2^(-85)

Linux > ./fshow 15213243
浮点值2.131829405e-38
位表示0x00e822bb，符号= 0，指数= 0x01，分数= 0x6822bb
归一化。+1.8135598898 × 2^(-126)以上翻译结果来自有道神经网络翻译（YNMT）· 通用场景
